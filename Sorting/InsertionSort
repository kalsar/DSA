#include <bits/stdc++.h>
using namespace std;
int main() {
    int arr[]={23, 1, 10, 5, 2};
    int n=sizeof(arr)/sizeof(arr[0]);
    
   for(int i=1; i<n; i++){
       int key=arr[i];
       int j=i-1;
       while(j>=0 and arr[j]>key){
           arr[j+1]=arr[j];
           j--;
        }
      arr[j+1]=key;
   }
   for(int i=0; i<n; i++){
       cout<<arr[i]<<" ";
   }

    return 0;
}

-------------Time Complexity of Insertion Sort---------------

Best case: O(n) , If the list is already sorted, where n is the number of elements in the list.
Average case: O(n^2 ) , If the list is randomly ordered
Worst case: O(n^2 ) , If the list is in reverse order

---------------Question------------------

Q2. What is the Algorithmic Paradigm of the Insertion Sort algorithm?
Answer:- The Insertion Sort algorithm follows an incremental approach.

Q3. Is Insertion Sort an in-place sorting algorithm?
Answer:- Yes, insertion sort is an in-place sorting algorithm.

Q4. Is Insertion Sort a stable algorithm?
Answer:-Yes, insertion sort is a stable sorting algorithm.
