Leetcode :-15
Approach:1 Brute Force
T.C: (n^3)*log(num. of unique triplate)
S.C: 2*O(number of triplate)
-------------------Code--------------------
vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        set<vector<int>> st;
        for(int i=0; i<n-2; i++){
            for(int j=i+1; j<n-1; j++){
                for(int k=j+1; k<n; k++){
                    if(nums[i]+nums[j]+nums[k]==0){
                        vector<int> temp={nums[i],nums[j],nums[k]};
                         sort(temp.begin(),temp.end());
                         st.insert(temp);


                    }
                }
            }
        }
        vector<vector<int>> ans(st.begin(),st.end());
        return ans;
        
    }

Approach: 2
-----------------Code----------------------
T.C : O(n^2)*log(m)
S.C: 
 vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        set<vector<int>> st;

        for(int i=0; i<n; i++){
            set<int> hashset;
            for(int j=i+1; j<n; j++){
                int third=-(nums[i]+nums[j]);
               if(hashset.find(third)!=hashset.end()){

                        vector<int> temp={nums[i],nums[j],third};
                         sort(temp.begin(),temp.end());
                         st.insert(temp);
                         }
                         hashset.insert(nums[j]);
                }
            }
        
        vector<vector<int>> ans(st.begin(), st.end());
        return ans;
        
    }
