LeetCode:169
------------Approach 1:- Brute force :-------------
T.C=O(n^2)
int majority(vector<int>arr){
    int n=arr.size();
    for(int i=0; i<n; i++){
        int freq=1;
        for(int j=i+1; j<n; j++){
            if(arr[i]==arr[j]){
                freq++;
                }
            }
            if(freq>n/2){
                return arr[i];
            }
 }
}
---------------------Approach:-2: By sorting -----------------------
T.C=O(nLogn)

int majorityElement(vector<int>arr){
    int n=arr.size();
    sort(arr.begin(), arr.end());
      int freq=1;
      int ans=arr[0];
    
    for(int i=1; i<n; i++){
        if(arr[i]==arr[i-1]){
            freq++;
            }
        else{
            freq=1;
            ans=arr[i];
        }
        if(freq>n/2){
            return ans;
        }
}
return -1;
}
---------------------Approach-3. Best -------------------------
 int majorityElement(vector<int>& nums) {
        int majority=nums[0];
        int vote=0;
        for(int i=0; i<nums.size(); i++){
            if(vote==0){
              majority=nums[i];
            }
            if(nums[i]==majority){
                vote++;
            }
            else{
                vote--;
            }

        }
        return majority;
        
        
    }
